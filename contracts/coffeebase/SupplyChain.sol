pragma solidity >= 0.4.24;

import "../coffeeaccesscontrol/ConsumerRole.sol";
import "../coffeeaccesscontrol/DistributorRole.sol";
import "../coffeeaccesscontrol/FarmerRole.sol";
import "../coffeeaccesscontrol/RetailerRole.sol";
import "../coffeecore/Ownable.sol";

// Define a contract 'Supplychain'
//
contract SupplyChain is Ownable, ConsumerRole, DistributorRole, FarmerRole, RetailerRole {
    // Define a variable called 'upc' for Universal Product Code (UPC)
    //uint  upc;
    // Define a variable called 'sku' for Stock Keeping Unit (SKU)
    uint internal sku;
    // Define a public mapping 'items' that maps the UPC to an Item.
    mapping (uint => Item) internal items;
    // Define a public mapping 'itemsHistory' that maps the UPC to an array of TxHash, 
    // that track its journey through the supply chain -- to be sent from DApp.
    // To be dis-regarded as per https://medium.com/@andresaaap/architect-a-blockchain-supply-chain-solution-part-b-project-faq-udacity-blockchain-da86496fce55
    // mapping (uint => string[]) itemsHistory;
    
    // Define enum 'State' with the following values:
    enum State { 
        Uninitialized, // 0 - this is also used to check that an entry (key) in items has not been set
        Harvested,  // 1
        Processed,  // 2
        Packed,     // 3
        ForSale,    // 4
        Sold,       // 5
        Shipped,    // 6
        Received,   // 7
        Purchased   // 8
    }

    //State constant defaultState = State.Harvested;

    // Define a struct 'Item' with the following fields:
    struct Item {
      uint    sku;  // Stock Keeping Unit (SKU)
      uint    upc; // Universal Product Code (UPC), generated by the Farmer, goes on the package, can be verified by the Consumer
      address ownerID;  // Metamask-Ethereum address of the current owner as the product moves through 8 stages
      address originFarmerID; // Metamask-Ethereum address of the Farmer
      string  originFarmName; // Farmer Name
      string  originFarmInformation;  // Farmer Information
      string  originFarmLatitude; // Farm Latitude
      string  originFarmLongitude;  // Farm Longitude
      uint    productID;  // Product ID potentially a combination of upc + sku
      string  productNotes; // Product Notes
      uint    productPrice; // Product Price
      State   itemState;  // Product State as represented in the enum above
      address distributorID;  // Metamask-Ethereum address of the Distributor
      address retailerID; // Metamask-Ethereum address of the Retailer
      address consumerID; // Metamask-Ethereum address of the Consumer
    }

    // Define 8 events with the same 8 state values and accept 'upc' as input argument
    event Harvested(uint upc);
    event Processed(uint upc);
    event Packed(uint upc);
    event ForSale(uint upc);
    event Sold(uint upc);
    event Shipped(uint upc);
    event Received(uint upc);
    event Purchased(uint upc);

    // Define a modifer that checks to see if msg.sender == owner of the contract
    // Obsolete, now done through inheriting Ownable
    // modifier onlyOwner() {
    //   require(msg.sender == owner);
    //   _;
    // }

    // Define a modifer that verifies the Caller
    modifier verifyCaller(address _address) {
        require(msg.sender == _address); 
        _;
    }

    // Define a modifier that checks if the paid amount is sufficient to cover the price
    modifier paidEnough(uint _price) { 
        require(msg.value >= _price); 
        _;
    }
    
    // Define a modifier that checks the price and refunds the remaining balance
    modifier checkValue(uint _upc) {
        _;
        uint _price = items[_upc].productPrice;
        uint amountToReturn = msg.value - _price;
        // We need to make this conversion to be able to use transfer() function to transfer ethers
        address payable ownerAddressPayable = _make_payable(msg.sender); 
        ownerAddressPayable.transfer(amountToReturn);
    }

    // Define a modifier that checks if an item.state of a upc is Uninitialized
    modifier uninitialized(uint _upc) {
        require(items[_upc].itemState == State.Uninitialized);
        _;
    }

    // Define a modifier that checks if an item.state of a upc is Harvested
    modifier harvested(uint _upc) {
        require(items[_upc].itemState == State.Harvested);
        _;
    }

    // Define a modifier that checks if an item.state of a upc is Processed
    modifier processed(uint _upc) {
        require(items[_upc].itemState == State.Processed);
        _;
    }
    
    // Define a modifier that checks if an item.state of a upc is Packed
    modifier packed(uint _upc) {
        require(items[_upc].itemState == State.Packed);
        _;
    }

    // Define a modifier that checks if an item.state of a upc is ForSale
    modifier forSale(uint _upc) {
        require(items[_upc].itemState == State.ForSale);
        _;
    }

    // Define a modifier that checks if an item.state of a upc is Sold
    modifier sold(uint _upc) {
        require(items[_upc].itemState == State.Sold);
        _;
    }
    
    // Define a modifier that checks if an item.state of a upc is Shipped
    modifier shipped(uint _upc) {
        require(items[_upc].itemState == State.Shipped);
        _;
    }

    // Define a modifier that checks if an item.state of a upc is Received
    modifier received(uint _upc) {
        require(items[_upc].itemState == State.Received);
        _;
    }

    // Define a modifier that checks if an item.state of a upc is Purchased
    modifier purchased(uint _upc) {
        require(items[_upc].itemState == State.Purchased);
        _;
    }

    // In the constructor set 'owner' to the address that instantiated the contract
    // and set 'sku' to 1
    // and set 'upc' to 1
    constructor() public payable Ownable() ConsumerRole() DistributorRole() FarmerRole() RetailerRole() {
      //owner = msg.sender;
      sku = 1;
      //upc = 1;
    }

    // Function that allows you to convert an address into a payable address
    function _make_payable(address x) internal pure returns (address payable) {
        return address(uint160(x));
    }

    // Define a function 'kill' if required
    function kill() public onlyOwner() {
        selfdestruct(_make_payable(owner()));      
    }

    // Define a function 'harvestItem' that allows a farmer to mark an item 'Harvested'
    function harvestItem(
        uint _upc,
        address _originFarmerID,
        string memory _originFarmName,
        string memory _originFarmInformation,
        string memory _originFarmLatitude,
        string memory _originFarmLongitude,
        string memory  _productNotes
    )
        public
        onlyFarmer
        // check that _upc is uninitialized
        uninitialized(_upc)
    {
        // Add the new item as part of Harvest
        //Item memory new_item ;
        Item memory new_item ; // = items[_upc];
        new_item.sku = sku ;
        new_item.upc = _upc ;
        new_item.ownerID = msg.sender ;
        new_item.originFarmerID = _originFarmerID ;
        new_item.originFarmName = _originFarmName ;
        new_item.originFarmInformation = _originFarmInformation ;
        new_item.originFarmLatitude = _originFarmLatitude ;
        new_item.originFarmLongitude = _originFarmLongitude ;
        new_item.productID = _upc * 10000 + sku ; // assume there won't be more than 10000 sku's
        new_item.productNotes = _productNotes ;
        // new_item.productPrice = 0 ; // not set here
        new_item.itemState = State.Harvested ;
        // new_item.distributorID // not set here
        // new_item.retailerID // not set here
        // new_item.consumerID // not set here
        items[_upc] = new_item ;

        // Increment sku
        sku = sku + 1;
        // Emit the appropriate event
        emit Harvested(_upc);
    }

    // Define a function 'processItem' that allows a farmer to mark an item 'Processed'
    function processItem(uint _upc)
        public
        onlyFarmer
        // Call modifier to check if upc has passed previous supply chain stage
        harvested(_upc)
        // Call modifier to verify caller of this function
        verifyCaller(items[_upc].ownerID)
    {
        // Update the appropriate fields
        items[_upc].itemState = State.Processed;
        // Emit the appropriate event
        emit Processed(_upc);      
    }

    // Define a function 'packItem' that allows a farmer to mark an item 'Packed'
    function packItem(uint _upc)
        public
        onlyFarmer
        // Call modifier to check if upc has passed previous supply chain stage
        processed(_upc)
        // Call modifier to verify caller of this function
        verifyCaller(items[_upc].ownerID)
    {
        // Update the appropriate fields
        items[_upc].itemState = State.Packed;
        // Emit the appropriate event
        emit Packed(_upc);
    }

    // Define a function 'sellItem' that allows a farmer to mark an item 'ForSale'
    function sellItem(uint _upc, uint _price)
        public 
        onlyFarmer
        // Call modifier to check if upc has passed previous supply chain stage
        packed(_upc)
        // Call modifier to verify caller of this function
        verifyCaller(items[_upc].ownerID)
    {
        // Update the appropriate fields
        items[_upc].itemState = State.ForSale;
        items[_upc].productPrice = _price;
        // Emit the appropriate event
        emit ForSale(_upc);      
    }

    // Define a function 'buyItem' that allows the disributor to mark an item 'Sold'
    // Use the above defined modifiers to check if the item is available for sale, if the buyer has paid enough, 
    // and any excess ether sent is refunded back to the buyer
    function buyItem(uint _upc)
        public
        payable 
        onlyDistributor
        // Call modifier to check if upc has passed previous supply chain stage
        forSale(_upc)
        // Call modifer to check if buyer has paid enough
        paidEnough(items[_upc].productPrice)
        // Call modifer to send any excess ether back to buyer
        checkValue(_upc)
    {
        // Prepare transfer of money to farmer
        uint amountToPay = items[_upc].productPrice;
        address ownerAddress = items[_upc].ownerID;
        // We need to make this conversion to be able to use transfer() function to transfer ethers
        address payable ownerAddressPayable = _make_payable(ownerAddress); 

        // Update the appropriate fields - ownerID, distributorID, itemState
        items[_upc].ownerID = msg.sender;
        items[_upc].distributorID = msg.sender;
        items[_upc].itemState = State.Sold;
        
        // actually transfer ethers        
        ownerAddressPayable.transfer(amountToPay); 

        // emit the appropriate event
        emit Sold( _upc);    
    }

    // Define a function 'shipItem' that allows the distributor to mark an item 'Shipped'
    // Use the above modifers to check if the item is sold
    function shipItem(uint _upc)
        public 
        onlyDistributor
        // Call modifier to check if upc has passed previous supply chain stage
        sold(_upc)
        // Call modifier to verify caller of this function
        verifyCaller(items[_upc].ownerID)
    {
        // Update the appropriate fields
        items[_upc].itemState = State.Shipped;
        // Emit the appropriate event
        emit Shipped(_upc);      
    }

    // Define a function 'receiveItem' that allows the retailer to mark an item 'Received'
    // Use the above modifiers to check if the item is shipped
    function receiveItem(uint _upc)
        public 
        onlyRetailer
        // Call modifier to check if upc has passed previous supply chain stage
        shipped(_upc)
        // Access Control List enforced by calling Smart Contract / DApp
    {
        // Update the appropriate fields - ownerID, retailerID, itemState
        items[_upc].ownerID = msg.sender;
        items[_upc].retailerID = msg.sender;
        items[_upc].itemState = State.Received;

        // Emit the appropriate event
        emit Received(_upc);      
    }

    // Define a function 'purchaseItem' that allows the consumer to mark an item 'Purchased'
    // Use the above modifiers to check if the item is received
    function purchaseItem(uint _upc)
        public 
        onlyConsumer
        // Call modifier to check if upc has passed previous supply chain stage
        received(_upc)
        // Access Control List enforced by calling Smart Contract / DApp
    {
        // Update the appropriate fields - ownerID, consumerID, itemState
        items[_upc].ownerID = msg.sender;
        items[_upc].consumerID = msg.sender;
        items[_upc].itemState = State.Purchased;
      
        // Emit the appropriate event
        emit Purchased(_upc);
    }

    // Define a function 'fetchItemBufferOne' that fetches the data
    function fetchItemBufferOne(uint _upc)
        public
        view
        returns (
          uint itemSKU,
          uint itemUPC,
          address ownerID,
          address originFarmerID,
          string  memory originFarmName,
          string  memory originFarmInformation,
          string  memory originFarmLatitude,
          string  memory originFarmLongitude
        ) 
    {
        // Assign values to the 8 parameters
        Item memory item = items[_upc] ;
        return (
          item.sku,
          item.upc,
          item.ownerID,
          item.originFarmerID,
          item.originFarmName,
          item.originFarmInformation,
          item.originFarmLatitude,
          item.originFarmLongitude
        );
    }

    // Define a function 'fetchItemBufferTwo' that fetches the data
    function fetchItemBufferTwo(uint _upc)
        public
        view
        returns (
            uint    itemSKU,
            uint    itemUPC,
            uint    productID,
            string  memory productNotes,
            uint    productPrice,
            uint    itemState,
            address distributorID,
            address retailerID,
            address consumerID
        ) 
    {
        // Assign values to the 9 parameters
        Item memory item = items[_upc] ;
        return (
          item.sku,
          item.upc,
          item.productID,
          item.productNotes,
          item.productPrice,
          uint(item.itemState),
          item.distributorID,
          item.retailerID,
          item.consumerID
        );      
    }
}